const I="data:text/markdown;base64,IyBUYXJ0ZSBUYXRpbiB3aXRoIENyw6htZSBGcmHDrmNoZSBhbmQgQ2FyYW1lbCBTYXVjZQ0KDQpBIGRlbGVjdGFibHkgaXJyZXNpc3RpYmxlIGRlc3NlcnQgdGhhdCBjb21iaW5lcyBidXR0ZXJ5LCBjYXJhbWVsaXplZCBhcHBsZXMgd2l0aCBmbGFreSBwYXN0cnksIHNlcnZlZCB3aXRoIGEgZG9sbG9wIG9mIGNyw6htZSBmcmHDrmNoZSBhbmQgYSBkcml6emxlIG9mIHJpY2ggY2FyYW1lbCBzYXVjZS4NCg0KIyMgSW5ncmVkaWVudHM6DQoNCiMjIyBGb3IgdGhlIFRhcnRlIFRhdGluOg0KLSAqKjYgbWVkaXVtIGFwcGxlcyoqIChzdWNoIGFzIEdvbGRlbiBEZWxpY2lvdXMsIEdyYW5ueSBTbWl0aCwgb3IgRnVqaSkNCi0gKioxMDBnICg3IHRhYmxlc3Bvb25zKSB1bnNhbHRlZCBidXR0ZXIqKg0KLSAqKjE1MGcgKDMvNCBjdXApIGNhc3RlciBzdWdhcioqDQotICoqMSBzaGVldCBwdWZmIHBhc3RyeSoqDQotICoqRmxvdXIgZm9yIGR1c3RpbmcqKg0KLSAqKlBpbmNoIG9mIHNhbHQqKg0KDQojIyMgRm9yIHRoZSBDYXJhbWVsIFNhdWNlOg0KLSAqKjIwMGcgKDEgY3VwKSBncmFudWxhdGVkIHN1Z2FyKioNCi0gKioxMjBtbCAoMS8yIGN1cCkgaGVhdnkgY3JlYW0qKg0KLSAqKjYwZyAoNCB0YWJsZXNwb29ucykgdW5zYWx0ZWQgYnV0dGVyKioNCi0gKipQaW5jaCBvZiBzZWEgc2FsdCoqDQoNCiMjIyBUbyBTZXJ2ZToNCi0gKipDcsOobWUgZnJhw65jaGUqKg0KDQojIyBJbnN0cnVjdGlvbnM6DQoNCiMjIyBQcmVwYXJpbmcgdGhlIFRhcnRlIFRhdGluOg0KMS4gKipQcmVoZWF0IHRoZSBPdmVuOioqDQogICAgLSBQcmVoZWF0IHRoZSBvdmVuIHRvIDE5MMKwQyAoMzc1wrBGKS4NCg0KMi4gKipQcmVwYXJlIHRoZSBBcHBsZXM6KioNCiAgICAtIFBlZWwsIGNvcmUsIGFuZCBxdWFydGVyIHRoZSBhcHBsZXMuDQogICAgLSBNZWx0IHRoZSBidXR0ZXIgb3ZlciBtZWRpdW0gaGVhdCBpbiBhIGxhcmdlIG92ZW5wcm9vZiBza2lsbGV0Lg0KDQozLiAqKkNhcmFtZWxpemU6KioNCiAgICAtIEFkZCB0aGUgY2FzdGVyIHN1Z2FyIHRvIHRoZSBza2lsbGV0LCBzdGlycmluZyBvY2Nhc2lvbmFsbHkgdW50aWwgaXQgbWVsdHMgYW5kIHR1cm5zIGdvbGRlbiBicm93bi4NCiAgICAtIENhcmVmdWxseSBwbGFjZSB0aGUgYXBwbGUgcXVhcnRlcnMgaW50byB0aGUgY2FyYW1lbCBpbiBhIGNpcmN1bGFyIHBhdHRlcm4uDQogICAgLSBDb29rIHRoZSBhcHBsZXMgaW4gdGhlIGNhcmFtZWwgZm9yIGFib3V0IDEwIG1pbnV0ZXMsIGdlbnRseSB0dXJuaW5nIHRoZW0gdG8gZW5zdXJlIGV2ZW4gY29va2luZyBhbmQgY2FyYW1lbGl6YXRpb24gb24gYWxsIHNpZGVzLg0KDQo0LiAqKkFycmFuZ2UgYW5kIENvb2s6KioNCiAgICAtIFJlbW92ZSB0aGUgc2tpbGxldCBmcm9tIGhlYXQuIENhcmVmdWxseSBhcnJhbmdlIHRoZSBhcHBsZSBxdWFydGVycyB0aWdodGx5IGluIHRoZSBza2lsbGV0OyB0aGV5J2xsIHJlZHVjZSBpbiBzaXplIGFzIHRoZXkgY29vay4NCg0KNS4gKipQcmVwYXJlIHRoZSBQYXN0cnk6KioNCiAgICAtIE9uIGEgbGlnaHRseSBmbG91cmVkIHN1cmZhY2UsIHJvbGwgb3V0IHRoZSBwdWZmIHBhc3RyeSBzbGlnaHRseS4NCiAgICAtIFRyaW0gdGhlIHBhc3RyeSBpbnRvIGEgY2lyY2xlIGp1c3QgbGFyZ2VyIHRoYW4gdGhlIHNraWxsZXQuDQoNCjYuICoqQXNzZW1ibGUgdGhlIFRhcnRlOioqDQogICAgLSBQbGFjZSB0aGUgcHVmZiBwYXN0cnkgb3ZlciB0aGUgYXBwbGVzLCB0dWNraW5nIHRoZSBlZGdlcyBpbnRvIHRoZSBzaWRlcyBvZiB0aGUgc2tpbGxldC4NCg0KNy4gKipCYWtlOioqDQogICAgLSBUcmFuc2ZlciB0aGUgc2tpbGxldCB0byB0aGUgcHJlaGVhdGVkIG92ZW4uDQogICAgLSBCYWtlIGZvciAyNS0zMCBtaW51dGVzLCBvciB1bnRpbCB0aGUgcGFzdHJ5IGlzIGdvbGRlbiBicm93biBhbmQgcHVmZmVkLg0KDQo4LiAqKkNvb2wgYW5kIEludmVydDoqKg0KICAgIC0gUmVtb3ZlIGZyb20gdGhlIG92ZW4gYW5kIGxldCBjb29sIGZvciBhIGZldyBtaW51dGVzLg0KICAgIC0gQ2FyZWZ1bGx5IGludmVydCB0aGUgdGFydCBvbnRvIGEgc2VydmluZyBwbGF0ZS4NCg0KIyMjIE1ha2luZyB0aGUgQ2FyYW1lbCBTYXVjZToNCjEuICoqQ29vayB0aGUgU3VnYXI6KioNCiAgICAtIEluIGEgc2F1Y2VwYW4sIGhlYXQgdGhlIHN1Z2FyIG92ZXIgbWVkaXVtIGhlYXQsIHN0aXJyaW5nIGNvbnNpc3RlbnRseSwgdW50aWwgaXQgbWVsdHMgaW50byBhbiBhbWJlci1jb2xvcmVkIGxpcXVpZC4NCiAgICAtIE9uY2UgbWVsdGVkLCBhZGQgdGhlIGJ1dHRlciwgYW5kIHN0aXIgdW50aWwgZnVsbHkgY29tYmluZWQuDQoNCjIuICoqQ29tcGxldGUgdGhlIFNhdWNlOioqDQogICAgLSBSZW1vdmUgZnJvbSBoZWF0IGFuZCBzbG93bHkgYWRkIHRoZSBoZWF2eSBjcmVhbSB3aGlsZSBzdGlycmluZyBjb250aW51b3VzbHkgdW50aWwgc21vb3RoLg0KICAgIC0gU3RpciBpbiB0aGUgc2VhIHNhbHQuDQogICAgLSBBbGxvdyB0aGUgc2F1Y2UgdG8gY29vbCBzbGlnaHRseS4NCg0KIyMjIFNlcnZlOg0KLSBTZXJ2ZSBpbmRpdmlkdWFsIHNsaWNlcyBvZiB0aGUgd2FybSBUYXJ0ZSBUYXRpbiB3aXRoIGEgc3Bvb25mdWwgb2YgY3LDqG1lIGZyYcOuY2hlIGFuZCBhIGdlbmVyb3VzIGRyaXp6bGUgb2YgY2FyYW1lbCBzYXVjZS4NCg0KIyMjIFdpbmUgUGFpcmluZzoNCi0gUGFpciB0aGlzIGRpc2ggd2l0aCBhIHN3ZWV0IGFuZCB2aWJyYW50IFZldXZlIENsaWNxdW90IERlbWktU2VjIHRvIGNvbXBsZW1lbnQgdGhlIGZsYXZvcnMgYW5kIGVuaGFuY2UgeW91ciBkZXNzZXJ0IGV4cGVyaWVuY2UuDQoNCiMjIyBUaXBzOg0KLSBVc2UgZmlybSBhcHBsZXMgdG8gbWFpbnRhaW4gdGhlIHN0cnVjdHVyZSBvZiB0aGUgdGFydC4NCi0gQmUgY2F1dGlvdXMgd2hlbiB3b3JraW5nIHdpdGggY2FyYW1lbCwgYXMgaXQgY2FuIGJ1cm4gcXVpY2tseS4NCg0KRW5qb3kgdGhpcyBjbGFzc2ljIEZyZW5jaCBkZXNzZXJ0IHdpdGggYSBtb2Rlcm4gdHdpc3QsIG9mZmVyaW5nIGEgaGFybW9uaW91cyBibGVuZCBvZiBmbGF2b3JzIGFuZCB0ZXh0dXJlcyE=";export{I as default};
