const I="data:text/markdown;base64,IyBWZW5pc29uIE1lZGFsbGlvbnMgd2l0aCBXaWxkIE11c2hyb29tcywgVHJ1ZmZsZWQgUG90YXRvIEdyYXRpbiwgYW5kIEp1bmlwZXIgQmVycnkgU2F1Y2UNCg0KIyMgSW5ncmVkaWVudHM6DQoNCiMjIyBWZW5pc29uIE1lZGFsbGlvbnM6DQotIDQgeCA2b3ogdmVuaXNvbiBtZWRhbGxpb25zDQotIFNhbHQgYW5kIGZyZXNobHkgZ3JvdW5kIGJsYWNrIHBlcHBlciB0byB0YXN0ZQ0KLSAyIHRhYmxlc3Bvb25zIG9saXZlIG9pbA0KLSAxIHRhYmxlc3Bvb24gdW5zYWx0ZWQgYnV0dGVyDQotIEZyZXNoIHRoeW1lIHNwcmlncyAoZm9yIGdhcm5pc2gpDQoNCiMjIyBXaWxkIE11c2hyb29tczoNCi0gMiB0YWJsZXNwb29ucyBvbGl2ZSBvaWwNCi0gMSB0YWJsZXNwb29uIHVuc2FsdGVkIGJ1dHRlcg0KLSAxIGN1cCBhc3NvcnRlZCB3aWxkIG11c2hyb29tcyAoY2hhbnRlcmVsbGVzLCBwb3JjaW5pLCBzaGlpdGFrZSksIGNsZWFuZWQgYW5kIHNsaWNlZA0KLSAxIGNsb3ZlIGdhcmxpYywgbWluY2VkDQotIFNhbHQgYW5kIGZyZXNobHkgZ3JvdW5kIGJsYWNrIHBlcHBlciB0byB0YXN0ZQ0KLSAxIHRhYmxlc3Bvb24gZnJlc2ggcGFyc2xleSwgY2hvcHBlZA0KDQojIyMgVHJ1ZmZsZWQgUG90YXRvIEdyYXRpbjoNCi0gMiBsYXJnZSBydXNzZXQgcG90YXRvZXMsIHRoaW5seSBzbGljZWQgKGFib3V0IDEvOC1pbmNoIHRoaWNrKQ0KLSAxIGN1cCBoZWF2eSBjcmVhbQ0KLSAxLzIgY3VwIG1pbGsNCi0gMSBjbG92ZSBnYXJsaWMsIG1pbmNlZA0KLSAxLzIgdGVhc3Bvb24gc2FsdA0KLSAxLzQgdGVhc3Bvb24gZnJlc2hseSBncm91bmQgYmxhY2sgcGVwcGVyDQotIDEvMiBjdXAgR3J1ecOocmUgY2hlZXNlLCBncmF0ZWQNCi0gMSB0YWJsZXNwb29uIHRydWZmbGUgb2lsDQoNCiMjIyBKdW5pcGVyIEJlcnJ5IFNhdWNlOg0KLSAxIHRhYmxlc3Bvb24gb2xpdmUgb2lsDQotIDEgc21hbGwgc2hhbGxvdCwgY2hvcHBlZA0KLSAyIHRhYmxlc3Bvb25zIGp1bmlwZXIgYmVycmllcywgY3J1c2hlZA0KLSAxLzIgY3VwIHJlZCB3aW5lDQotIDEgY3VwIGJlZWYgb3IgdmVuaXNvbiBzdG9jaw0KLSAxIHRlYXNwb29uIGJhbHNhbWljIHZpbmVnYXINCi0gMSB0YWJsZXNwb29uIGNvbGQgdW5zYWx0ZWQgYnV0dGVyDQoNCiMjIEluc3RydWN0aW9uczoNCg0KIyMjIFN0ZXAgMTogUHJlcGFyZSB0aGUgVHJ1ZmZsZWQgUG90YXRvIEdyYXRpbg0KMS4gUHJlaGVhdCBvdmVuIHRvIDM3NcKwRiAoMTkwwrBDKS4NCjIuIEluIGEgc2F1Y2VwYW4sIGNvbWJpbmUgY3JlYW0sIG1pbGssIGdhcmxpYywgc2FsdCwgYW5kIHBlcHBlci4gSGVhdCB1bnRpbCBqdXN0IHNpbW1lcmluZy4NCjMuIEFycmFuZ2Ugb25lIGxheWVyIG9mIHBvdGF0byBzbGljZXMgaW4gYSBidXR0ZXJlZCBiYWtpbmcgZGlzaC4NCjQuIFBvdXIgc29tZSBvZiB0aGUgY3JlYW0gbWl4dHVyZSBldmVubHkgb3ZlciBwb3RhdG9lcyBhbmQgYWRkIHNvbWUgY2hlZXNlLg0KNS4gUmVwZWF0IGxheWVycyB1bnRpbCBhbGwgcG90YXRvZXMgYXJlIHVzZWQuDQo2LiBEcml6emxlIHdpdGggdHJ1ZmZsZSBvaWwsIGNvdmVyIHdpdGggZm9pbCwgYW5kIGJha2UgZm9yIDQwIG1pbnV0ZXMuDQo3LiBVbmNvdmVyLCBzcHJpbmtsZSB3aXRoIHJlbWFpbmluZyBjaGVlc2UsIGFuZCBiYWtlIGZvciBhbm90aGVyIDE1IG1pbnV0ZXMgdW50aWwgZ29sZGVuIGJyb3duLg0KDQojIyMgU3RlcCAyOiBDb29rIHRoZSBWZW5pc29uIE1lZGFsbGlvbnMNCjEuIFNlYXNvbiB2ZW5pc29uIG1lZGFsbGlvbnMgZ2VuZXJvdXNseSB3aXRoIHNhbHQgYW5kIHBlcHBlci4NCjIuIEhlYXQgb2xpdmUgb2lsIGluIGEgc2tpbGxldCBvdmVyIG1lZGl1bS1oaWdoIGhlYXQuIEFkZCBidXR0ZXIuDQozLiBPbmNlIGZvYW1pbmcsIHNlYXIgbWVkYWxsaW9ucyBmb3IgMy00IG1pbnV0ZXMgb24gZWFjaCBzaWRlIGZvciBtZWRpdW0tcmFyZS4NCjQuIFJlbW92ZSBtZWRhbGxpb25zIGZyb20gcGFuIGFuZCBsZXQgcmVzdCB1bmRlciBmb2lsLg0KDQojIyMgU3RlcCAzOiBTYXV0w6kgdGhlIFdpbGQgTXVzaHJvb21zDQoxLiBJbiB0aGUgc2FtZSBza2lsbGV0LCBhZGQgb2xpdmUgb2lsIGFuZCBidXR0ZXIuDQoyLiBBZGQgdGhlIG1pbmNlZCBnYXJsaWMgYW5kIHNhdXTDqSB1bnRpbCBmcmFncmFudC4NCjMuIFN0aXIgaW4gd2lsZCBtdXNocm9vbXMsIGNvb2tpbmcgdW50aWwgZ29sZGVuIGJyb3duLg0KNC4gU2Vhc29uIHdpdGggc2FsdCwgcGVwcGVyLCBhbmQgcGFyc2xleS4gU2V0IGFzaWRlLg0KDQojIyMgU3RlcCA0OiBQcmVwYXJlIHRoZSBKdW5pcGVyIEJlcnJ5IFNhdWNlDQoxLiBJbiBhIHNtYWxsIHNhdWNlcGFuIG92ZXIgbWVkaXVtIGhlYXQsIHdhcm0gb2xpdmUgb2lsLg0KMi4gQWRkIHNoYWxsb3QgYW5kIHNhdXTDqSB1bnRpbCB0cmFuc2x1Y2VudC4NCjMuIEFkZCBjcnVzaGVkIGp1bmlwZXIgYmVycmllcyBhbmQgc3RpciBmb3IgMSBtaW51dGUuDQo0LiBQb3VyIGluIHRoZSByZWQgd2luZSBhbmQgcmVkdWNlIGJ5IGhhbGYuDQo1LiBBZGQgc3RvY2sgYW5kIGJhbHNhbWljIHZpbmVnYXIsIHJlZHVjaW5nIHVudGlsIHNhdWNlIHRoaWNrZW5zLg0KNi4gV2hpc2sgaW4gY29sZCBidXR0ZXIgdW50aWwgdGhlIHNhdWNlIGlzIGdsb3NzeS4NCjcuIFN0cmFpbiBzYXVjZSB0byByZW1vdmUgc29saWRzLg0KDQojIyMgU3RlcCA1OiBBc3NlbWJsZSBhbmQgU2VydmUNCjEuIE9uIGluZGl2aWR1YWwgcGxhdGVzLCBzZXJ2ZSB2ZW5pc29uIG1lZGFsbGlvbnMgYXRvcCB0aGUgdHJ1ZmZsZWQgcG90YXRvIGdyYXRpbi4NCjIuIFNwb29uIHdpbGQgbXVzaHJvb21zIGFyb3VuZCB0aGUgbWVkYWxsaW9ucy4NCjMuIERyaXp6bGUgd2l0aCBqdW5pcGVyIGJlcnJ5IHNhdWNlLg0KNC4gR2FybmlzaCB3aXRoIGZyZXNoIHRoeW1lIHNwcmlncy4NCjUuIFBhaXIgd2l0aCBhIGdsYXNzIG9mIEJhcm9sbyBHLkQuIFZhanJhIEJyaWNjbyBkZWxsZSBWaW9sZSAyMDE2Lg0KDQpFbmpveSB5b3VyIGV4cXVpc2l0ZSB2ZW5pc29uIG1lZGFsbGlvbnMgd2l0aCB3aWxkIG11c2hyb29tcyBhbmQgdHJ1ZmZsZWQgcG90YXRvIGdyYXRpbiE=";export{I as default};
